{"version":3,"sources":["uid.ts","EditReducer.ts","Editor.js","App.tsx","serviceWorker.ts","index.tsx"],"names":["gen32","Math","random","toString","substring","uid","isProgramNode","node","type","isAssignmentNode","isIdentifierNode","isExpressionNode","isUndefinedExpressionNode","isIntegerLiteralNode","isArrayLiteralNode","SCHEMA_NODES","Program","fields","assignments","nodeType","Assignment","identifier","expression","Identifier","name","UndefinedExpression","IntegerLiteral","value","ArrayLiteral","items","SCHEMA_CLASSES","Expression","nodeFromPath","root","path","cur","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","err","return","nodeSplitPath","idx","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","seg","slice","Error","equiv","a","b","JSON","stringify","deleteAssignment","removeIdx","newNode","Object","objectSpread","concat","toConsumableArray","length","newIdx","max","min","push","genuid","text","updateIdentifier","updateExpression","test","Number","HANDLERS","_ref","subpath","textEdit","_ref2","_ref3","action","newAssignmentIdx","_ref4","_ref5","nameText","_ref6","initText","_ref7","afterIdx","_ref8","_ref9","char","_ref10","_ref11","_ref12","_ref13","_ref14","_ref15","_ref16","_ref17","recursiveReducer","state","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","nodeOnPath","selectionPath","nodeInfo","newSelPath","newTextEdit","handled","indexableNode","_i","_Object$entries","entries","_ref22","_ref19","slicedToArray","fieldName","childNode","recResult","_recResult","n","sp","te","newArr","childNodes","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","arrn","_recResult3","isNode","_i2","_HANDLERS","_ref23","_ref21","nt","acts","hfunc","includes","_nodeSplitPath","_nodeSplitPath2","pathBefore","handlerResult","console","log","_handlerResult","handlerNewNode","handlerNewSubpath","handlerTextEdit","reducer","_recResult4","newRoot","newSelectionPath","initialState","keyMap","MOVE_PREV","MOVE_NEXT","MOVE_OUT","MOVE_IN","ENTER","INSERT_AFTER","DELETE","ASSIGN","COMMAND_CHARS","DispatchContext","createContext","SelectedNodeContext","useWithSelectedClass","obj","cns","arguments","useContext","TextEditContext","TextEditInput","dispatch","react_default","createElement","className","onChange","e","target","autoFocus","Hole","ProgramView","program","map","assignment","AssignmentView","key","IdentifierView","ExpressionView","NotEditingIdentifierView","selected","IntegerLiteralView","integerLiteral","ArrayLiteralView","arrayLiteral","item","UndefinedExpressionView","undefinedExpression","NotEditingExpressionView","Editor","_useReducer","useReducer","_useReducer2","editorElem","useRef","_useState","useState","constAutoFocus","useEffect","current","focus","previouslyTextEditing","textEditing","handlers","_loop","k","_Object$keys","tagName","toLowerCase","preventDefault","keys","index_es","onKeyDown","altkey","ctrlKey","metaKey","tabIndex","ref","Provider","App","Editor_Editor","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6e0e961b.chunk.js","sourcesContent":["const gen32 = (): string => Math.random().toString(16).substring(2, 10);\n\nexport default (): string => gen32() + gen32();\n","import genuid from './uid';\n\n// We don't make a discriminated union of specific actions, but maybe we could\ninterface Action {\n  type: string;\n  text?: string;\n  char?: string;\n}\n\ninterface ProgramNode {\n  type: 'Program';\n  assignments: AssignmentNode[];\n}\nfunction isProgramNode(node: Node): node is ProgramNode {\n  return node.type === 'Program';\n}\n\ninterface AssignmentNode {\n  type: 'Assignment';\n  uid: string;\n  identifier: IdentifierNode;\n  expression: ExpressionNode;\n}\nfunction isAssignmentNode(node: Node): node is AssignmentNode {\n  return node.type === 'Assignment';\n}\n\ninterface IdentifierNode {\n  type: 'Identifier';\n  name: string | null;\n}\nfunction isIdentifierNode(node: Node): node is IdentifierNode {\n  return node.type === 'Identifier';\n}\n\ntype ExpressionNode = UndefinedExpressionNode | IntegerLiteralNode | ArrayLiteralNode;\nfunction isExpressionNode(node: Node): node is ExpressionNode {\n  return isUndefinedExpressionNode(node) || isIntegerLiteralNode(node)|| isArrayLiteralNode(node);\n}\n\ninterface UndefinedExpressionNode {\n  type: 'UndefinedExpression';\n}\nfunction isUndefinedExpressionNode(node: Node): node is UndefinedExpressionNode {\n  return node.type === 'UndefinedExpression';\n}\n\ninterface IntegerLiteralNode {\n  type: 'IntegerLiteral';\n  value: number;\n}\nfunction isIntegerLiteralNode(node: Node): node is IntegerLiteralNode {\n  return node.type === 'IntegerLiteral';\n}\n\ninterface ArrayLiteralNode {\n  type: 'ArrayLiteral';\n  items: ExpressionNode[];\n}\nfunction isArrayLiteralNode(node: Node): node is ArrayLiteralNode {\n  return node.type === 'ArrayLiteral';\n}\n\ntype Node = ProgramNode | AssignmentNode | IdentifierNode | ExpressionNode;\nfunction isNode(node: any): node is Node {\n  return isProgramNode(node) || isAssignmentNode(node) || isIdentifierNode(node) || isExpressionNode(node);\n}\n\ntype Path = (string | number)[];\n\ninterface TextEdit {\n  text: string;\n}\n\ninterface HandlerArgs {\n  node: Node,\n  subpath: Path,\n  action: Action;\n  textEdit: TextEdit | null;\n}\ntype HandlerResult = (undefined | [Node, Path, TextEdit | null]);\ntype Handler = [string, string[], (args: HandlerArgs) => HandlerResult];\n\ninterface State {\n  root: ProgramNode;\n  selectionPath: Path;\n  textEdit: TextEdit | null;\n}\n\nconst SCHEMA_NODES = {\n  Program: {\n    fields: {\n      assignments: {type: 'nodes', nodeType: 'Assignment'},\n    }\n  },\n\n  Assignment: {\n    fields: {\n      uid: {type: 'uid'},\n      identifier: {type: 'node', nodeType: 'Identifier'},\n      expression: {type: 'node', nodeType: 'Expression'},\n    }\n  },\n\n  Identifier: {\n    fields: {\n      name: {type: 'value'},\n    }\n  },\n\n  UndefinedExpression: {\n    fields: {\n    }\n  },\n\n  IntegerLiteral: {\n    fields: {\n      value: {type: 'value'},\n    }\n  },\n\n  ArrayLiteral: {\n    fields: {\n      items: {type: 'nodes', nodeType: 'Expression'},\n    }\n  },\n};\n\n// TODO: If we want to include other classes in the lists, generate an expansion over the closure\nconst SCHEMA_CLASSES: {[nodeType: string]: string[]} = {\n  Expression: ['UndefinedExpression', 'IntegerLiteral'],\n}\n\nexport function nodeFromPath(root: Node, path: Path): Node {\n  let cur: any = root;\n  for (const seg of path) {\n    cur = cur[seg];\n  }\n  return cur;\n}\n\nexport function nodeOnPath(node: Node, root: Node, path: Path): boolean {\n  if (node === root) {\n    return true;\n  }\n\n  let cur: any = root;\n  for (const seg of path) {\n    cur = cur[seg];\n    if (node === cur) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nexport function nodeSplitPath(node: Node, root: Node, path: Path): [Path, Path] {\n  let cur: any = root;\n  let idx = 0;\n  for (const seg of path) {\n    if (node === cur) {\n      return [path.slice(0, idx), path.slice(idx)];\n    }\n    cur = cur[seg];\n    idx++;\n  }\n\n  if (node === cur) {\n    return [path.slice(0, idx), path.slice(idx)];\n  } else {\n    throw new Error('node was not in path');\n  }\n}\n\nconst equiv = (a: any, b: any): boolean => JSON.stringify(a) === JSON.stringify(b);\n\nfunction deleteAssignment(node: ProgramNode, removeIdx: number): [ProgramNode, Path, TextEdit | null] {\n  // TODO: Handle case where we delete all assignments\n  if (typeof(removeIdx) !== 'number') {\n    throw new Error();\n  }\n  const newNode = {\n    ...node,\n    assignments: [\n      ...node.assignments.slice(0, removeIdx),\n      ...node.assignments.slice(removeIdx+1),\n    ],\n  };\n\n  if (newNode.assignments.length) {\n    let newIdx = removeIdx-1;\n    newIdx = Math.max(newIdx, 0);\n    newIdx = Math.min(newIdx, node.assignments.length-1);\n    return [newNode, ['assignments', newIdx], null];\n  } else {\n    // We've deleted all assignments, so make a single empty one.\n    newNode.assignments.push({\n      type: 'Assignment',\n      uid: genuid(),\n      identifier: {\n        type: 'Identifier',\n        name: null,\n      },\n      expression: {\n        type: 'UndefinedExpression',\n      }\n    });\n    return [newNode, ['assignments', 0, 'identifier'], {text: ''}];\n  }\n}\n\nfunction updateIdentifier(node: IdentifierNode, text: string): IdentifierNode {\n  return {\n    ...node,\n    name: text ? text : null, // TODO: ensure that it's valid?\n  };\n}\n\nfunction updateExpression(node: ExpressionNode, text: string): ExpressionNode {\n  const FLOAT_REGEX = /^[-+]?(?:\\d*\\.?\\d+|\\d+\\.?\\d*)(?:[eE][-+]?\\d+)?$/;\n\n  if (text === '[') {\n    return {\n      type: 'ArrayLiteral',\n      items: [],\n    }\n  } else if (FLOAT_REGEX.test(text)) {\n    return {\n      type: 'IntegerLiteral',\n      value: Number(text),\n    };\n  } else {\n    return {\n      type: 'UndefinedExpression',\n    };\n  }\n}\n\nconst HANDLERS: Handler[] = [\n  ['Assignment', ['MOVE_OUT'], ({node, subpath, textEdit}) => {\n    if (textEdit) {\n      return;\n    }\n    if (equiv(subpath, ['identifier'])) {\n      return [node, [], null];\n    } else if (equiv(subpath, ['expression'])) {\n      return [node, ['identifier'], null];\n    }\n  }],\n\n  ['Assignment', ['MOVE_IN'], ({node, subpath, textEdit}) => {\n    if (textEdit) {\n      return;\n    }\n    if (equiv(subpath, [])) {\n      return [node, ['identifier'], null];\n    } else if (equiv(subpath, ['identifier'])) {\n      return [node, ['expression'], null];\n    }\n  }],\n\n  ['Program', ['MOVE_PREV', 'MOVE_NEXT'], ({node, subpath, textEdit, action}) => {\n    if (!isProgramNode(node)) {\n      throw new Error();\n    }\n\n    if (textEdit) {\n      return;\n    }\n\n    // NOTE: This assumes that selection is on/in one of the assignments\n    const newAssignmentIdx = () => {\n      const idx = subpath[1];\n      if (typeof idx !== 'number') {\n        throw new Error();\n      }\n      let newIdx = idx + ((action.type === 'MOVE_PREV') ? -1 : 1);\n      newIdx = Math.max(newIdx, 0);\n      newIdx = Math.min(newIdx, node.assignments.length-1);\n      return newIdx;\n    }\n\n    if ((subpath.length === 2) && (subpath[0] === 'assignments')) {\n      return [node, ['assignments', newAssignmentIdx()], null];\n    } else if ((subpath.length === 3) && (subpath[0] === 'assignments')) {\n      return [node, ['assignments', newAssignmentIdx(), subpath[2]], null];\n    }\n  }],\n\n  ['Program', ['DELETE'], ({node, subpath, textEdit}) => {\n    if (!isProgramNode(node)) {\n      throw new Error();\n    }\n    if ((subpath.length === 2) && (subpath[0] === 'assignments')) {\n      if (textEdit) {\n        throw new Error();\n      }\n      const removeIdx = subpath[1];\n      if (typeof(removeIdx) !== 'number') {\n        throw new Error();\n      }\n      return deleteAssignment(node, removeIdx);\n    }\n  }],\n\n  ['Identifier', ['ENTER'], ({node, subpath, textEdit}) => {\n    if (!isIdentifierNode(node)) {\n      throw new Error();\n    }\n    if (textEdit) {\n      return [node, subpath, null];\n    } else {\n      const nameText = node.name || '';\n      return [updateIdentifier(node, nameText), subpath, {text: nameText}];\n    }\n  }],\n\n  ['Expression', ['ENTER'], ({node, subpath, textEdit}) => {\n    if (textEdit) {\n      return [node, subpath, null];\n    } else {\n      // Initialize the input\n      let initText;\n      switch (node.type) {\n        case 'IntegerLiteral':\n         initText = node.value.toString();\n         break;\n\n        case 'UndefinedExpression':\n          initText = '';\n          break;\n\n        default:\n          throw new Error();\n      }\n\n      return [updateExpression(node, initText), subpath, {text: initText}];\n    }\n  }],\n\n  ['Program', ['INSERT_AFTER'], ({node, subpath, textEdit}) => {\n    if (!isProgramNode(node)) {\n      throw new Error();\n    }\n    if ((subpath.length >= 2) && (subpath[0] === 'assignments') && !textEdit) {\n      const afterIdx = subpath[1];\n      if (typeof(afterIdx) !== 'number') {\n        throw new Error();\n      }\n      const newNode: ProgramNode = {\n        ...node,\n        assignments: [\n          ...node.assignments.slice(0, afterIdx+1),\n          {\n            type: 'Assignment',\n            uid: genuid(),\n            identifier: {\n              type: 'Identifier',\n              name: null,\n            },\n            expression: {\n              type: 'UndefinedExpression',\n            }\n          },\n          ...node.assignments.slice(afterIdx+1),\n        ],\n      };\n      return [newNode, ['assignments', afterIdx+1, 'identifier'], {text: ''}];\n    }\n  }],\n\n  /**\n   * DELETE when editing the LHS of assignment will delete the assignment, if the input box is empty and the RHS is undefined.\n   * This is mainly to allow us to easily \"undo\" adding a new assignment by just hitting DELETE.\n   */\n  ['Program', ['DELETE'], ({node, subpath, textEdit}) => {\n    if (!isProgramNode(node)) {\n      throw new Error();\n    }\n    if ((subpath.length === 3) && (subpath[0] === 'assignments') && (subpath[2] === 'identifier') && textEdit && (textEdit.text === '')) {\n      const removeIdx = subpath[1];\n      if (typeof(removeIdx) !== 'number') {\n        throw new Error();\n      }\n      if (node.assignments[removeIdx].expression.type === 'UndefinedExpression') {\n        if (typeof(removeIdx) !== 'number') {\n          throw new Error();\n        }\n        return deleteAssignment(node, removeIdx);\n      }\n    }\n  }],\n\n  /**\n   * Typing a character on an identifier jumps straight into editing it (overwriting)\n   */\n  ['Identifier', ['CHAR'], ({node, subpath, textEdit, action}) => {\n    if (!isIdentifierNode(node)) {\n      throw new Error();\n    }\n    if (textEdit || subpath.length || !action.char) {\n      throw new Error();\n    }\n    // Space is not a \"command character\", but I don't think we want it to trigger the start of editing\n    if (action.char !== ' ') {\n      return [updateIdentifier(node, action.char), subpath, {text: action.char}];\n    }\n  }],\n\n  /**\n   * Typing a character on an expression jumps straight into editing it (overwriting)\n   */\n  ['Expression', ['CHAR'], ({node, subpath, textEdit, action}) => {\n    if (!isExpressionNode(node)) {\n      throw new Error();\n    }\n    if (textEdit || subpath.length || !action.char) {\n      throw new Error();\n    }\n    // Space is not a \"command character\", but I don't think we want it to trigger the start of editing\n    if (action.char !== ' ') {\n      return [updateExpression(node, action.char), subpath, {text: action.char}];\n    }\n  }],\n\n  /**\n   * ASSIGN on an assignment will move to editing the RHS in many cases.\n   */\n  ['Assignment', ['ASSIGN'], ({node, subpath, textEdit}) => {\n    if (!isAssignmentNode(node)) {\n      throw new Error();\n    }\n    if ((!textEdit && (equiv(subpath, []) || equiv(subpath, ['identifier']) || equiv(subpath, ['expression']))) ||\n    (textEdit && equiv(subpath, ['identifier']))) {\n      return [{\n        ...node,\n        expression: updateExpression(node.expression, ''),\n      }, ['expression'], {text: ''}];\n    }\n  }],\n\n  ['Identifier', ['SET_TEXT'], ({node, subpath, textEdit, action}) => {\n    if (!textEdit) {\n      throw new Error();\n    }\n    if (typeof(action.text) !== 'string') {\n      throw new Error();\n    }\n    if (subpath.length !== 0) {\n      throw new Error();\n    }\n    if (!isIdentifierNode(node)) {\n      throw new Error();\n    }\n\n    return [updateIdentifier(node, action.text), subpath, {text: action.text}];\n  }],\n\n  ['Expression', ['SET_TEXT'], ({node, subpath, textEdit, action}) => {\n    if (!textEdit) {\n      throw new Error();\n    }\n    if (typeof(action.text) !== 'string') {\n      throw new Error();\n    }\n    if (!isExpressionNode(node)) {\n      throw new Error();\n    }\n\n    return [updateExpression(node, action.text), subpath, {text: action.text}];\n  }],\n\n  ['ArrayLiteral', ['MOVE_OUT'], ({node, subpath, textEdit}) => {\n    if (textEdit) {\n      return;\n    }\n    if (subpath.length === 2) {\n      if ((subpath[0] !== 'items') || (typeof(subpath[1]) !== 'number')) {\n        throw Error();\n      }\n      return [node, [], null];\n    }\n  }],\n\n  ['ArrayLiteral', ['MOVE_IN'], ({node, subpath, textEdit}) => {\n    if (textEdit) {\n      return;\n    }\n    if (subpath.length === 0) {\n      return [node, ['items', 0], null];\n    }\n  }],\n\n  ['ArrayLiteral', ['MOVE_PREV', 'MOVE_NEXT'], ({node, subpath, textEdit, action}) => {\n    if (!isArrayLiteralNode(node)) {\n      throw new Error();\n    }\n\n    if (textEdit) {\n      return;\n    }\n\n    if ((subpath.length === 2) && (subpath[0] === 'items')) {\n      const idx = subpath[1];\n      if (typeof idx !== 'number') {\n        throw new Error();\n      }\n      const newIdx = idx + ((action.type === 'MOVE_PREV') ? -1 : 1);\n\n      if ((newIdx < 0) || (newIdx >= node.items.length)) {\n        return [node, [], null];\n      } else {\n        return [node, ['items', newIdx], null];\n      }\n    }\n  }],\n\n  ['ArrayLiteral', ['INSERT_AFTER'], ({node, subpath, textEdit}) => {\n    if (!isArrayLiteralNode(node)) {\n      throw new Error();\n    }\n    if ((subpath.length === 2) && (subpath[0] === 'items') && !textEdit) {\n      const afterIdx = subpath[1];\n      if (typeof(afterIdx) !== 'number') {\n        throw new Error();\n      }\n      const newNode: ArrayLiteralNode = {\n        ...node,\n        items: [\n          ...node.items.slice(0, afterIdx+1),\n          {\n            type: 'UndefinedExpression',\n          },\n          ...node.items.slice(afterIdx+1),\n        ],\n      };\n      return [newNode, ['items', afterIdx+1], {text: ''}];\n    }\n  }],\n];\n\n/**\n * Returns null or [newNode, newSelectionPath, newTextEdit]\n */\nfunction recursiveReducer(state: State, node: Node, action: Action): (null | [Node, Path, TextEdit | null]) {\n  // If this node is not on the selection path, we can short circuit\n  if (!nodeOnPath(node, state.root, state.selectionPath)) {\n    return null;\n  }\n\n  // Build new node, recursing into any child nodes\n  // If nothing has changed, we try to return the original object to allow callers to memoize\n  const nodeInfo = SCHEMA_NODES[node.type];\n  if (!nodeInfo) {\n    throw new Error();\n  }\n  const newNode: any = {\n    type: node.type,\n  };\n  let newSelPath = null;\n  let newTextEdit = null;\n  let handled = false;\n  const indexableNode = node as {[prop: string]: any}; // to avoid type errors\n  for (const [fieldName, fieldInfo] of Object.entries(nodeInfo.fields)) {\n    switch (fieldInfo.type) {\n      case 'node': {\n        const childNode = indexableNode[fieldName];\n        const recResult = recursiveReducer(state, childNode, action);\n        if (recResult) {\n          if (handled) {\n            throw new Error('already handled');\n          }\n          const [n, sp, te] = recResult;\n          newNode[fieldName] = n;\n          newSelPath = sp;\n          newTextEdit = te;\n          handled = true;\n        } else {\n          newNode[fieldName] = childNode;\n        }\n        break;\n      }\n\n      case 'nodes': {\n        const newArr = [];\n        const childNodes = indexableNode[fieldName];\n        for (const arrn of childNodes) {\n          const recResult = recursiveReducer(state, arrn, action);\n          if (recResult) {\n            if (handled) {\n              throw new Error('already handled');\n            }\n            const [n, sp, te] = recResult;\n            newArr.push(n);\n            newSelPath = sp;\n            newTextEdit = te;\n            handled = true;\n          } else {\n            newArr.push(arrn);\n          }\n        }\n        newNode[fieldName] = newArr;\n        break;\n      }\n\n      case 'value':\n        newNode[fieldName] = indexableNode[fieldName];\n        break;\n\n      case 'uid':\n        newNode[fieldName] = indexableNode[fieldName];\n        break;\n\n      default:\n        throw new Error();\n    }\n  }\n\n  // If the action has been handled, we can return now\n  if (handled) {\n    if (!isNode(newNode)) {\n      throw new Error();\n    }\n    if (!newSelPath) {\n      throw new Error();\n    }\n    return [newNode, newSelPath, newTextEdit];\n  }\n\n  // Try any matching handlers\n  for (const [nt, acts, hfunc] of HANDLERS) {\n    const matchingTypes = SCHEMA_CLASSES[nt] ? SCHEMA_CLASSES[nt] : [nt];\n    if (matchingTypes.includes(node.type) && acts.includes(action.type)) {\n      const [pathBefore, pathAfter] = nodeSplitPath(node, state.root, state.selectionPath);\n      const handlerResult = hfunc({\n        node,\n        subpath: pathAfter,\n        action,\n        textEdit: state.textEdit,\n      });\n      if (handlerResult) {\n        console.log('handlerResult', handlerResult);\n        const [handlerNewNode, handlerNewSubpath, handlerTextEdit] = handlerResult;\n        return [handlerNewNode, pathBefore.concat(handlerNewSubpath), handlerTextEdit];\n      }\n    }\n  }\n\n  return null;\n}\n\nexport function reducer(state: State, action: Action): State {\n  console.log('action', action.type);\n\n/*\n  // Some actions are handled specially\n  if (action.type === 'SET_TEXT') {\n    if (!state.textEdit) {\n      throw new Error();\n    }\n    if (typeof(action.text) !== 'string') {\n      throw new Error();\n    }\n\n    return {\n      ...state,\n      textEdit: {\n        ...state.textEdit,\n        text: action.text,\n      }\n    };\n  }\n*/\n\n  const recResult = recursiveReducer(state, state.root, action);\n  if (recResult) {\n    console.log('handled');\n    const [newRoot, newSelectionPath, newTextEdit] = recResult;\n    console.log('new selectionPath is', newSelectionPath, 'textEdit is', newTextEdit);\n\n    if (!isProgramNode(newRoot)) {\n      throw new Error();\n    }\n\n    return {\n      root: newRoot,\n      selectionPath: newSelectionPath,\n      textEdit: newTextEdit,\n    };\n  } else {\n    console.log('not handled');\n    return state;\n  }\n}\n\nexport const initialState: State = {\n  // root: {\n  //   type: 'Program',\n  //   assignments: [],\n  // },\n  root: {\n    type: 'Program',\n    assignments: [\n      {\n        type: 'Assignment',\n        uid: genuid(),\n        identifier: {\n          type: 'Identifier',\n          name: 'foo',\n        },\n        expression: {\n          type: 'IntegerLiteral',\n          value: 123,\n        }\n      },\n      {\n        type: 'Assignment',\n        uid: genuid(),\n        identifier: {\n          type: 'Identifier',\n          name: 'bar',\n        },\n        expression: {\n          type: 'IntegerLiteral',\n          value: 456,\n        }\n      },\n      {\n        type: 'Assignment',\n        uid: genuid(),\n        identifier: {\n          type: 'Identifier',\n          name: 'baz',\n        },\n        expression: {\n          type: 'IntegerLiteral',\n          value: 789,\n        }\n      },\n      {\n        type: 'Assignment',\n        uid: genuid(),\n        identifier: {\n          type: 'Identifier',\n          name: null,\n        },\n        expression: {\n          type: 'IntegerLiteral',\n          value: 4321,\n        }\n      },\n      {\n        type: 'Assignment',\n        uid: genuid(),\n        identifier: {\n          type: 'Identifier',\n          name: 'blap',\n        },\n        expression: {\n          type: 'ArrayLiteral',\n          items: [\n            {\n              type: 'IntegerLiteral',\n              value: 123,\n            },\n            {\n              type: 'ArrayLiteral',\n              items: [\n                {\n                  type: 'IntegerLiteral',\n                  value: 345,\n                },\n                {\n                  type: 'IntegerLiteral',\n                  value: 456,\n                },\n              ],\n            },\n            {\n              type: 'IntegerLiteral',\n              value: 234,\n            },\n          ],\n        }\n      },\n      {\n        type: 'Assignment',\n        uid: genuid(),\n        identifier: {\n          type: 'Identifier',\n          name: 'quux',\n        },\n        expression: {\n          type: 'UndefinedExpression',\n        }\n      },\n    ]\n  },\n  selectionPath: ['assignments', 0, 'identifier'],\n  textEdit: null,\n};\n","import React, { createContext, useContext, useReducer, useRef, useEffect, useState } from 'react';\nimport { HotKeys, ObserveKeys } from \"react-hotkeys\";\nimport { initialState, reducer, nodeFromPath } from './EditReducer';\nimport './Editor.css';\n\nconst keyMap = {\n  MOVE_PREV: 'up',\n  MOVE_NEXT: 'down',\n  MOVE_OUT: 'left',\n  MOVE_IN: 'right',\n\n  ENTER: 'enter', // since this has multiple functions based on context, not sure how else to name\n\n  INSERT_AFTER: 'shift+enter',\n\n  DELETE: 'backspace',\n  ASSIGN: '=',\n\n/*\n  SHRINK: 'shift+right',\n  EXTEND_PREV: 'shift+up',\n  EXTEND_NEXT: 'shift+down',\n  CANCEL_EDIT: 'escape',\n*/\n};\n\n// \"Regular\" (printable, basically) characters that are used as commands\nconst COMMAND_CHARS = [\n  '=',\n];\n\nconst DispatchContext = createContext();\n\nconst SelectedNodeContext = createContext();\nfunction useWithSelectedClass(obj, cns = '') {\n  const selectedNode = useContext(SelectedNodeContext);\n  return (obj === selectedNode) ? (cns + ' Editor-selected') : cns;\n}\n\nconst TextEditContext = createContext();\n\nfunction TextEditInput() {\n  const dispatch = useContext(DispatchContext);\n  const textEdit = useContext(TextEditContext);\n\n  const onChange = e => {\n    dispatch({\n      type: 'SET_TEXT',\n      text: e.target.value,\n    });\n  };\n\n  return <div><input className=\"Editor-text-edit-input Editor-selected\" value={textEdit.text} onChange={onChange} autoFocus /></div>\n}\n\nfunction Hole() {\n  return <div className=\"Editor-hole\">&nbsp;</div>\n}\n\nfunction ProgramView({ program }) {\n  return (\n    <div>\n      {program.assignments.map((assignment) => (\n        <AssignmentView assignment={assignment} key={assignment.uid} />\n      ))}\n    </div>\n  );\n}\n\nfunction AssignmentView({ assignment }) {\n  return (\n    <div className={useWithSelectedClass(assignment, 'Editor-assignment')}>\n      <IdentifierView identifier={assignment.identifier} />\n      <div>&nbsp;=&nbsp;</div>\n      <ExpressionView expression={assignment.expression} />\n    </div>\n  );\n}\n\nfunction NotEditingIdentifierView({ identifier }) {\n  return (\n    <div className={useWithSelectedClass(identifier)}>\n      {(typeof identifier.name === 'string')\n        ? identifier.name\n        : <Hole />\n      }\n    </div>\n  );\n}\n\nfunction IdentifierView({ identifier }) {\n  const selected = (identifier === useContext(SelectedNodeContext));\n  const textEdit = useContext(TextEditContext);\n  if (selected && textEdit) {\n    return <TextEditInput />\n  } else {\n    return <NotEditingIdentifierView identifier={identifier} />\n  }\n}\n\nfunction IntegerLiteralView({ integerLiteral }) {\n  return <div className={useWithSelectedClass(integerLiteral)}>{integerLiteral.value}</div>;\n}\n\nfunction ArrayLiteralView({ arrayLiteral }) {\n  return (\n    <div className={useWithSelectedClass(arrayLiteral)}>\n      <div>[</div>\n      <div className=\"Editor-array-items\">\n        {arrayLiteral.items.map(item => (\n          <div className=\"Editor-array-item\"><ExpressionView expression={item} /></div>\n        ))}\n      </div>\n      <div>]</div>\n    </div>\n  );\n}\n\nfunction UndefinedExpressionView({ undefinedExpression }) {\n  return <div className={useWithSelectedClass(undefinedExpression)}><Hole /></div>;\n}\n\nfunction NotEditingExpressionView({ expression }) {\n  switch (expression.type) {\n    case 'IntegerLiteral':\n      return <IntegerLiteralView integerLiteral={expression} />\n\n    case 'ArrayLiteral':\n      return <ArrayLiteralView arrayLiteral={expression} />\n\n    case 'UndefinedExpression':\n      return <UndefinedExpressionView undefinedExpression={expression} />\n\n    default:\n      throw new Error();\n  }\n}\n\nfunction ExpressionView({ expression }) {\n  const selected = (expression === useContext(SelectedNodeContext));\n  const textEdit = useContext(TextEditContext);\n\n  if (selected && textEdit) {\n    return <TextEditInput />\n  } else {\n    return <NotEditingExpressionView expression={expression} />\n  }\n}\n\nexport default function Editor({ autoFocus }) {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const editorElem = useRef();\n\n  // Do auto-focus if prop is set\n  const [constAutoFocus] = useState(autoFocus);\n  useEffect(() => {\n    if (constAutoFocus) {\n      // Focus editor after initial render\n      editorElem.current.focus();\n    }\n  }, [constAutoFocus]);\n\n  // Restore focus to editor elem if input box just went away.\n  // NOTE: This is hacky, but don't know better way to handle.\n  const previouslyTextEditing = useRef(false);\n  useEffect(() => {\n    const textEditing = !!state.textEdit;\n    if (previouslyTextEditing.current && !textEditing) {\n      editorElem.current.focus();\n    }\n    previouslyTextEditing.current = textEditing;\n  });\n\n  // TODO: memoize generation of this\n  const handlers = {};\n  for (const k of Object.keys(keyMap)) {\n    handlers[k] = (() => (e) => {\n      if ((e.target.tagName.toLowerCase() !== 'input') || (COMMAND_CHARS.includes(e.key))) {\n        // NOTE: This is important, otherwise keys like '=' will go into the input element\n        e.preventDefault();\n      }\n      dispatch({type: k});\n    })(); // IIFE to bind k\n  }\n\n  const onKeyDown = e => {\n    if (e.target.tagName.toLowerCase() === 'input') {\n      // Ignore if this came from an input box\n      return;\n    }\n    // TODO: This is not a robust check, but the spec is complicated\n    // (https://www.w3.org/TR/uievents-key/#keys-whitespace)\n    if (([...e.key].length === 1) && !e.altkey && !e.ctrlKey && !e.metaKey && !COMMAND_CHARS.includes(e.key)) {\n      e.preventDefault(); // If we generate a CHAR action, then don't also allow default\n      dispatch({\n        type: 'CHAR',\n        char: e.key,\n      });\n    }\n  };\n\n  return (\n    <HotKeys keyMap={keyMap} handlers={handlers}>\n      <ObserveKeys>\n        <div className=\"Editor\" onKeyDown={onKeyDown} tabIndex=\"0\" ref={editorElem}>\n          <DispatchContext.Provider value={dispatch}>\n            <SelectedNodeContext.Provider value={nodeFromPath(state.root, state.selectionPath)}>\n              <TextEditContext.Provider value={state.textEdit}>\n                <ProgramView program={state.root} />\n              </TextEditContext.Provider>\n            </SelectedNodeContext.Provider>\n          </DispatchContext.Provider>\n        </div>\n      </ObserveKeys>\n    </HotKeys>\n  );\n}\n","import React from 'react';\nimport './App.css';\nimport Editor from './Editor';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <Editor autoFocus={true} />\n      <div>\n        <h2>Testing Tips</h2>\n        <ul>\n          <li><strong>The goal of this is to explore if there's a good way to do keyboard-driven structured code editing that doesn't suck. To not suck, I believe that there must be a very small number of keyboard commands, and they should be rather intuitive/obvious. As a bonus, it would be nice if it behaved similarly to spreadsheets or normal programming editors.</strong></li>\n          <li>Warning: A bunch of shit only half-works.</li>\n          <li>If you don't see a green selection/cursor box, focus the editor.</li>\n          <li>There's no mouse/touch support yet, only keyboard.</li>\n          <li>The AST always stays \"well-formed\", but some bits are allowed to be temporarily unspecified or invalid. The program may still be able to run with unspecified values, and it will be very clear to the user (red boxes) what is invalid/missing.</li>\n          <li>This code doesn't yet \"run\", it's just a fake language for now.</li>\n          <li>Up/down arrows move up and down between assignments and array items.</li>\n          <li>Left arrow generally moves \"out\" and right arrow generally moves \"in\" (to nested arrays, etc.).</li>\n          <li>If LHS of an assignment is selected, left arrow moves \"out\" to select the entire assignment.</li>\n          <li>Pressing enter on an identifier or number will begin editing it. Pressing enter again will stop editing.</li>\n          <li>Instead of pressing enter, you can just start typing letters/numbers and it will begin the edit (overwriting what it there).</li>\n          <li>Pressing the = key on the \"top levels\" of an assignment will beging editing the RHS.</li>\n          <li>A red box indicates an undefined identifer or expression.</li>\n          <li>If you enter an invalid number as an expression, it will ignore it and leave an undefined box.</li>\n          <li>Shift-enter adds a new assignment below the current one, or a new array item below the current one.</li>\n          <li>When an entire assignment is selected, delete will delete it.</li>\n          <li><strong>TODO</strong> Allow creating array literals.</li>\n          <li><strong>TODO</strong> Allow deleting array items.</li>\n          <li><strong>TODO</strong> Validate LHS identifiers.</li>\n          <li><strong>TODO</strong> Escape will revert any in-progress edit.</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}